var bVertex;		// Holds the vertex information of the base
var bColor;			// Holds the color information of the base

function pointX(n) { return n<0 ?  ref[(-n-1)*3  ] : ref[(n)*3  ]; }
function pointY(n) { return n<0 ?  ref[(-n-1)*3+1] : ref[(n)*3+1]; }
function pointZ(n) { return n<0 ? -ref[(-n-1)*3+2] : ref[(n)*3+2]; }
function Red(hex)  { return ((hex & 0xFF0000) >> 16) / 256;}
function Grn(hex)  { return ((hex & 0x00FF00) >>  8) / 256;}
function Blu(hex)  { return ((hex & 0x0000FF) >>  0) / 256;}

function FillBuffers()
{
	bVertex = new Float32Array(shapes.length/4*3*3);
	bColor   = new Float32Array(shapes.length/4*3*3);
	var length = shapes.length/4;
	
	for(i=0;i<length;i++)
	{	//Assign vertex coordinates for 3 points
		bVertex[i*9  ] = pointX(shapes[i*4  ]);
		bVertex[i*9+1] = pointY(shapes[i*4  ]);
		bVertex[i*9+2] = pointZ(shapes[i*4  ]);
		
		bVertex[i*9+3] = pointX(shapes[i*4+1]);
		bVertex[i*9+4] = pointY(shapes[i*4+1]);
		bVertex[i*9+5] = pointZ(shapes[i*4+1]);
		
		bVertex[i*9+6] = pointX(shapes[i*4+2]);
		bVertex[i*9+7] = pointY(shapes[i*4+2]);
		bVertex[i*9+8] = pointZ(shapes[i*4+2]);
		
		//Assign RGB color percentages for 3 points
		bColor[i*9  ] = Red(shapes[i*4+3]);
		bColor[i*9+1] = Grn(shapes[i*4+3]);
		bColor[i*9+2] = Blu(shapes[i*4+3]);
		
		bColor[i*9+3] = Red(shapes[i*4+3]);
		bColor[i*9+4] = Grn(shapes[i*4+3]);
		bColor[i*9+5] = Blu(shapes[i*4+3]);
		
		bColor[i*9+6] = Red(shapes[i*4+3]);
		bColor[i*9+7] = Grn(shapes[i*4+3]);
		bColor[i*9+8] = Blu(shapes[i*4+3]);
	}	
}

//Constant reference of vertex positions
var ref = [
-0.100, -0.775, -0.000,	// Vertex-0
-0.075, -0.775, -0.075,	// Vertex-1
-0.000, -0.775, -0.100,	// Vertex-2
 0.075, -0.775, -0.075,	// Vertex-3
 0.100, -0.775, -0.000,	// Vertex-4
 0.075, -0.775,  0.075,	// Vertex-5
-0.000, -0.775,  0.100,	// Vertex-6
-0.075, -0.775,  0.075,	// Vertex-7
-0.100, -0.625, -0.000,	// Vertex-8
-0.075, -0.625, -0.075,	// Vertex-9
-0.000, -0.625, -0.100,	// Vertex-10
 0.075, -0.625, -0.075,	// Vertex-11
 0.100, -0.625, -0.000,	// Vertex-12
 0.075, -0.625,  0.075,	// Vertex-13
-0.000, -0.625,  0.100,	// Vertex-14
-0.075, -0.625,  0.075,	// Vertex-15
-0.100, -0.475, -0.000,	// Vertex-16
-0.075, -0.475, -0.075,	// Vertex-17
-0.000, -0.475, -0.100,	// Vertex-18
 0.075, -0.475, -0.075,	// Vertex-19
 0.100, -0.475, -0.000,	// Vertex-20
 0.075, -0.475,  0.075,	// Vertex-21
-0.000, -0.475,  0.100,	// Vertex-22
-0.075, -0.475,  0.075,	// Vertex-23
-0.100, -0.325, -0.000,	// Vertex-24
-0.075, -0.325, -0.075,	// Vertex-25
-0.000, -0.325, -0.100,	// Vertex-26
 0.075, -0.325, -0.075,	// Vertex-27
 0.100, -0.325, -0.000,	// Vertex-28
 0.075, -0.325,  0.075,	// Vertex-29
-0.000, -0.325,  0.100,	// Vertex-30
-0.075, -0.325,  0.075,	// Vertex-31
-0.100, -0.175, -0.000,	// Vertex-32
-0.075, -0.175, -0.075,	// Vertex-33
-0.000, -0.175, -0.100,	// Vertex-34
 0.075, -0.175, -0.075,	// Vertex-35
 0.100, -0.175, -0.000,	// Vertex-36
 0.075, -0.175,  0.075,	// Vertex-37
-0.000, -0.175,  0.100,	// Vertex-38
-0.075, -0.175,  0.075,	// Vertex-39
-0.100, -0.025, -0.000,	// Vertex-40
-0.075, -0.025, -0.075,	// Vertex-41
-0.000, -0.025, -0.100,	// Vertex-42
 0.075, -0.025, -0.075,	// Vertex-43
 0.100, -0.025, -0.000,	// Vertex-44
 0.075, -0.025,  0.075,	// Vertex-45
-0.000, -0.025,  0.100,	// Vertex-46
-0.075, -0.025,  0.075,	// Vertex-47
-0.100,  0.125, -0.000,	// Vertex-48
-0.075,  0.125, -0.075,	// Vertex-49
-0.000,  0.125, -0.100,	// Vertex-50
 0.075,  0.125, -0.075,	// Vertex-51
 0.100,  0.125, -0.000,	// Vertex-52
 0.075,  0.125,  0.075,	// Vertex-53
-0.000,  0.125,  0.100,	// Vertex-54
-0.075,  0.125,  0.075,	// Vertex-55
-0.100,  0.125, -0.000,	// Vertex-56
-0.085,  0.150, -0.075,	// Vertex-57
-0.050,  0.215, -0.100,	// Vertex-58
-0.015,  0.275, -0.075,	// Vertex-59
-0.000,  0.300, -0.000,	// Vertex-60
-0.015,  0.275,  0.075,	// Vertex-61
-0.050,  0.215,  0.100,	// Vertex-62
-0.085,  0.150,  0.075,	// Vertex-63
-0.200,  0.225, -0.000,	// Vertex-64
-0.185,  0.250, -0.075,	// Vertex-65
-0.150,  0.315, -0.100,	// Vertex-66
-0.115,  0.375, -0.075,	// Vertex-67
-0.100,  0.400, -0.000,	// Vertex-68
-0.115,  0.375,  0.075,	// Vertex-69
-0.150,  0.315,  0.100,	// Vertex-70
-0.185,  0.250,  0.075,	// Vertex-71
-0.300,  0.325, -0.000,	// Vertex-72
-0.285,  0.350, -0.075,	// Vertex-73
-0.250,  0.415, -0.100,	// Vertex-74
-0.215,  0.475, -0.075,	// Vertex-75
-0.200,  0.500, -0.000,	// Vertex-76
-0.215,  0.475,  0.075,	// Vertex-77
-0.250,  0.415,  0.100,	// Vertex-78
-0.285,  0.350,  0.075,	// Vertex-79
-0.400,  0.425, -0.000,	// Vertex-80
-0.385,  0.450, -0.075,	// Vertex-81
-0.350,  0.515, -0.100,	// Vertex-82
-0.315,  0.575, -0.075,	// Vertex-83
-0.300,  0.600, -0.000,	// Vertex-84
-0.315,  0.575,  0.075,	// Vertex-85
-0.350,  0.515,  0.100,	// Vertex-86
-0.385,  0.450,  0.075,	// Vertex-87
-0.500,  0.525, -0.000,	// Vertex-88
-0.485,  0.550, -0.075,	// Vertex-89
-0.450,  0.615, -0.100,	// Vertex-90
-0.415,  0.675, -0.075,	// Vertex-91
-0.400,  0.700, -0.000,	// Vertex-92
-0.415,  0.675,  0.075,	// Vertex-93
-0.450,  0.615,  0.100,	// Vertex-94
-0.485,  0.550,  0.075,	// Vertex-95
 0.100,  0.125, -0.000,	// Vertex-96
 0.085,  0.150, -0.075,	// Vertex-97
 0.050,  0.215, -0.100,	// Vertex-98
 0.015,  0.275, -0.075,	// Vertex-99
-0.000,  0.300, -0.000,	// Vertex-100
 0.015,  0.275,  0.075,	// Vertex-101
 0.050,  0.215,  0.100,	// Vertex-102
 0.085,  0.150,  0.075,	// Vertex-103
 0.200,  0.225, -0.000,	// Vertex-104
 0.185,  0.250, -0.075,	// Vertex-105
 0.150,  0.315, -0.100,	// Vertex-106
 0.115,  0.375, -0.075,	// Vertex-107
 0.100,  0.400, -0.000,	// Vertex-108
 0.115,  0.375,  0.075,	// Vertex-109
 0.150,  0.315,  0.100,	// Vertex-110
 0.185,  0.250,  0.075,	// Vertex-111
 0.300,  0.325, -0.000,	// Vertex-112
 0.285,  0.350, -0.075,	// Vertex-113
 0.250,  0.415, -0.100,	// Vertex-114
 0.215,  0.475, -0.075,	// Vertex-115
 0.200,  0.500, -0.000,	// Vertex-116
 0.215,  0.475,  0.075,	// Vertex-117
 0.250,  0.415,  0.100,	// Vertex-118
 0.285,  0.350,  0.075,	// Vertex-119
 0.400,  0.425, -0.000,	// Vertex-120
 0.385,  0.450, -0.075,	// Vertex-121
 0.350,  0.515, -0.100,	// Vertex-122
 0.315,  0.575, -0.075,	// Vertex-123
 0.300,  0.600, -0.000,	// Vertex-124
 0.315,  0.575,  0.075,	// Vertex-125
 0.350,  0.515,  0.100,	// Vertex-126
 0.385,  0.450,  0.075,	// Vertex-127
 0.500,  0.525, -0.000,	// Vertex-128
 0.485,  0.550, -0.075,	// Vertex-129
 0.450,  0.615, -0.100,	// Vertex-130
 0.415,  0.675, -0.075,	// Vertex-131
 0.400,  0.700, -0.000,	// Vertex-132
 0.415,  0.675,  0.075,	// Vertex-133
 0.450,  0.615,  0.100,	// Vertex-134
 0.485,  0.550,  0.075,	// Vertex-135
-0.000, -0.775, -0.000,	// Vertex-136
-0.450,  0.615, -0.000,	// Vertex-137
 0.450,  0.615, -0.000,	// Vertex-138
-0.000,  0.215, -0.100,	// Vertex-139
-0.000,  0.215,  0.100,	// Vertex-140
];


   
//The Shape variable holds information about a triangle polygon.
//It has the ID of the 3 vertices that build it up, 
//And a Hexadecimal RGB color specifying the triangle's color
var shapes = 
[  //Slingshot Base
136,   1,   0, 0x000000,
136,   2,   1, 0x000000,
136,   3,   2, 0x000000,
136,   4,   3, 0x000000,
136,   5,   4, 0x000000,
136,   6,   5, 0x000000,
136,   7,   6, 0x000000,
136,   0,   7, 0x000000,
  0,   9,   8, 0x000000,
  0,   1,   9, 0x000000,
  1,  10,   9, 0x000000,
  1,   2,  10, 0x000000,
  2,  11,  10, 0x000000,
  2,   3,  11, 0x000000,
  3,  12,  11, 0x000000,
  3,   4,  12, 0x000000,
  4,  13,  12, 0x000000,
  4,   5,  13, 0x000000,
  5,  14,  13, 0x000000,
  5,   6,  14, 0x000000,
  6,  15,  14, 0x000000,
  6,   7,  15, 0x000000,
  7,   8,  15, 0x000000,
  7,   0,   8, 0x000000,
  8,  17,  16, 0x000000,
  8,   9,  17, 0x000000,
  9,  18,  17, 0x000000,
  9,  10,  18, 0x000000,
 10,  19,  18, 0x000000,
 10,  11,  19, 0x000000,
 11,  20,  19, 0x000000,
 11,  12,  20, 0x000000,
 12,  21,  20, 0x000000,
 12,  13,  21, 0x000000,
 13,  22,  21, 0x000000,
 13,  14,  22, 0x000000,
 14,  23,  22, 0x000000,
 14,  15,  23, 0x000000,
 15,  16,  23, 0x000000,
 15,   8,  16, 0x000000,
 16,  25,  24, 0x000000,
 16,  17,  25, 0x000000,
 17,  26,  25, 0x000000,
 17,  18,  26, 0x000000,
 18,  27,  26, 0x000000,
 18,  19,  27, 0x000000,
 19,  28,  27, 0x000000,
 19,  20,  28, 0x000000,
 20,  29,  28, 0x000000,
 20,  21,  29, 0x000000,
 21,  30,  29, 0x000000,
 21,  22,  30, 0x000000,
 22,  31,  30, 0x000000,
 22,  23,  31, 0x000000,
 23,  24,  31, 0x000000,
 23,  16,  24, 0x000000,
 24,  33,  32, 0x000000,
 24,  25,  33, 0x000000,
 25,  34,  33, 0x000000,
 25,  26,  34, 0x000000,
 26,  35,  34, 0x000000,
 26,  27,  35, 0x000000,
 27,  36,  35, 0x000000,
 27,  28,  36, 0x000000,
 28,  37,  36, 0x000000,
 28,  29,  37, 0x000000,
 29,  38,  37, 0x000000,
 29,  30,  38, 0x000000,
 30,  39,  38, 0x000000,
 30,  31,  39, 0x000000,
 31,  32,  39, 0x000000,
 31,  24,  32, 0x000000,
 32,  41,  40, 0x000000,
 32,  33,  41, 0x000000,
 33,  42,  41, 0x000000,
 33,  34,  42, 0x000000,
 34,  43,  42, 0x000000,
 34,  35,  43, 0x000000,
 35,  44,  43, 0x000000,
 35,  36,  44, 0x000000,
 36,  45,  44, 0x000000,
 36,  37,  45, 0x000000,
 37,  46,  45, 0x000000,
 37,  38,  46, 0x000000,
 38,  47,  46, 0x000000,
 38,  39,  47, 0x000000,
 39,  40,  47, 0x000000,
 39,  32,  40, 0x000000,
 40,  49,  48, 0x000000,
 40,  41,  49, 0x000000,
 41,  50,  49, 0x000000,
 41,  42,  50, 0x000000,
 42,  51,  50, 0x000000,
 42,  43,  51, 0x000000,
 43,  52,  51, 0x000000,
 43,  44,  52, 0x000000,
 44,  53,  52, 0x000000,
 44,  45,  53, 0x000000,
 45,  54,  53, 0x000000,
 45,  46,  54, 0x000000,
 46,  55,  54, 0x000000,
 46,  47,  55, 0x000000,
 47,  48,  55, 0x000000,
 47,  40,  48, 0x000000,
 56,  65,  64, 0x000000,
 56,  57,  65, 0x000000,
 57,  66,  65, 0x000000,
 57,  58,  66, 0x000000,
 58,  67,  66, 0x000000,
 58,  59,  67, 0x000000,
 59,  68,  67, 0x000000,
 59,  60,  68, 0x000000,
 60,  69,  68, 0x000000,
 60,  61,  69, 0x000000,
 61,  70,  69, 0x000000,
 61,  62,  70, 0x000000,
 62,  71,  70, 0x000000,
 62,  63,  71, 0x000000,
 63,  64,  71, 0x000000,
 63,  56,  64, 0x000000,
 64,  73,  72, 0x000000,
 64,  65,  73, 0x000000,
 65,  74,  73, 0x000000,
 65,  66,  74, 0x000000,
 66,  75,  74, 0x000000,
 66,  67,  75, 0x000000,
 67,  76,  75, 0x000000,
 67,  68,  76, 0x000000,
 68,  77,  76, 0x000000,
 68,  69,  77, 0x000000,
 69,  78,  77, 0x000000,
 69,  70,  78, 0x000000,
 70,  79,  78, 0x000000,
 70,  71,  79, 0x000000,
 71,  72,  79, 0x000000,
 71,  64,  72, 0x000000,
 72,  81,  80, 0x000000,
 72,  73,  81, 0x000000,
 73,  82,  81, 0x000000,
 73,  74,  82, 0x000000,
 74,  83,  82, 0x000000,
 74,  75,  83, 0x000000,
 75,  84,  83, 0x000000,
 75,  76,  84, 0x000000,
 76,  85,  84, 0x000000,
 76,  77,  85, 0x000000,
 77,  86,  85, 0x000000,
 77,  78,  86, 0x000000,
 78,  87,  86, 0x000000,
 78,  79,  87, 0x000000,
 79,  80,  87, 0x000000,
 79,  72,  80, 0x000000,
 80,  89,  88, 0x000000,
 80,  81,  89, 0x000000,
 81,  90,  89, 0x000000,
 81,  82,  90, 0x000000,
 82,  91,  90, 0x000000,
 82,  83,  91, 0x000000,
 83,  92,  91, 0x000000,
 83,  84,  92, 0x000000,
 84,  93,  92, 0x000000,
 84,  85,  93, 0x000000,
 85,  94,  93, 0x000000,
 85,  86,  94, 0x000000,
 86,  95,  94, 0x000000,
 86,  87,  95, 0x000000,
 87,  88,  95, 0x000000,
 87,  80,  88, 0x000000,
 96, 104, 105, 0x000000,
 96, 105,  97, 0x000000,
 97, 105, 106, 0x000000,
 97, 106,  98, 0x000000,
 98, 106, 107, 0x000000,
 98, 107,  99, 0x000000,
 99, 107, 108, 0x000000,
 99, 108, 100, 0x000000,
100, 108, 109, 0x000000,
100, 109, 101, 0x000000,
101, 109, 110, 0x000000,
101, 110, 102, 0x000000,
102, 110, 111, 0x000000,
102, 111, 103, 0x000000,
103, 111, 104, 0x000000,
103, 104,  96, 0x000000,
104, 112, 113, 0x000000,
104, 113, 105, 0x000000,
105, 113, 114, 0x000000,
105, 114, 106, 0x000000,
106, 114, 115, 0x000000,
106, 115, 107, 0x000000,
107, 115, 116, 0x000000,
107, 116, 108, 0x000000,
108, 116, 117, 0x000000,
108, 117, 109, 0x000000,
109, 117, 118, 0x000000,
109, 118, 110, 0x000000,
110, 118, 119, 0x000000,
110, 119, 111, 0x000000,
111, 119, 112, 0x000000,
111, 112, 104, 0x000000,
112, 120, 121, 0x000000,
112, 121, 113, 0x000000,
113, 121, 122, 0x000000,
113, 122, 114, 0x000000,
114, 122, 123, 0x000000,
114, 123, 115, 0x000000,
115, 123, 124, 0x000000,
115, 124, 116, 0x000000,
116, 124, 125, 0x000000,
116, 125, 117, 0x000000,
117, 125, 126, 0x000000,
117, 126, 118, 0x000000,
118, 126, 127, 0x000000,
118, 127, 119, 0x000000,
119, 127, 120, 0x000000,
119, 120, 112, 0x000000,
120, 128, 129, 0x000000,
120, 129, 121, 0x000000,
121, 129, 130, 0x000000,
121, 130, 122, 0x000000,
122, 130, 131, 0x000000,
122, 131, 123, 0x000000,
123, 131, 132, 0x000000,
123, 132, 124, 0x000000,
124, 132, 133, 0x000000,
124, 133, 125, 0x000000,
125, 133, 134, 0x000000,
125, 134, 126, 0x000000,
126, 134, 135, 0x000000,
126, 135, 127, 0x000000,
127, 135, 128, 0x000000,
127, 128, 120, 0x000000,
137,  88,  89, 0x000000,
137,  89,  90, 0x000000,
137,  90,  91, 0x000000,
137,  91,  92, 0x000000,
137,  92,  93, 0x000000,
137,  93,  94, 0x000000,
137,  94,  95, 0x000000,
137,  95,  88, 0x000000,
138, 129, 128, 0x000000,
138, 130, 129, 0x000000,
138, 131, 130, 0x000000,
138, 132, 131, 0x000000,
138, 133, 132, 0x000000,
138, 134, 133, 0x000000,
138, 135, 134, 0x000000,
138, 128, 135, 0x000000,
 48,  49,  57, 0x000000,
 49,  50,  57, 0x000000,
 50,  58,  57, 0x000000,
 50, 139,  58, 0x000000,
 50,  98, 139, 0x000000,
 50,  97,  98, 0x000000,
 50,  51,  97, 0x000000,
 51,  52,  97, 0x000000,
 52,  53, 103, 0x000000,
 53,  54, 103, 0x000000,
 54, 102, 103, 0x000000,
 54, 140, 102, 0x000000,
 54,  62, 140, 0x000000,
 54,  63,  62, 0x000000,
 54,  55,  63, 0x000000,
 55,  56,  62, 0x000000,
139,  98,  58, 0x000000,
140,  62, 102, 0x000000,
 58,  98,  99, 0x000000,
 58,  99,  59, 0x000000,
102,  62, 101, 0x000000,
 62,  61, 101, 0x000000,
 59,  99,  60, 0x000000,
 60, 101,  61, 0x000000, ];

 FillBuffers();